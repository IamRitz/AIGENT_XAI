!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rs/Desktop/AIGENT_XAI/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/bb9e69de4/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
B	AttackMNIST/src/XAI/main.py	/^    B = slic.Bundle()$/;"	v
B	AttackMNIST/src/XAI/slic.py	/^    B = Bundle()$/;"	v
Bundle	AttackMNIST/src/XAI/slic.py	/^class Bundle:$/;"	c
ConvertNNETtoTensorFlow	AttackCIFAR/src/ConvertNNETtoTensor.py	/^class ConvertNNETtoTensorFlow:$/;"	c
ConvertNNETtoTensorFlow	AttackImagenet/src/ConvertNNETtoTensor.py	/^class ConvertNNETtoTensorFlow:$/;"	c
ConvertNNETtoTensorFlow	AttackMNIST/src/ConvertNNETtoTensor.py	/^class ConvertNNETtoTensorFlow:$/;"	c
E	AttackMNIST/src/XAI/MinExp_bk.py	/^    E = XAI()$/;"	v
E	AttackMNIST/src/XAI/main.py	/^    E = minExp.XAI() $/;"	v
FindCutoff	AttackCIFAR/src/findModificationsLayerK.py	/^def FindCutoff(w):$/;"	f
FindCutoff	AttackCIFAR/src/modificationDivided.py	/^def FindCutoff(w):$/;"	f
FindCutoff	AttackImagenet/src/attackMethod.py	/^def FindCutoff(inputs, k):$/;"	f
FindCutoff	AttackImagenet/src/findModificationsLayerK.py	/^def FindCutoff(w):$/;"	f
FindCutoff	AttackImagenet/src/modificationDivided.py	/^def FindCutoff(w, num_layers):$/;"	f
G	AttackMNIST/src/XAI/MinExp_bk.py	/^    G = nx.DiGraph()$/;"	v
G	AttackMNIST/src/XAI/draw.py	/^    G = nx.DiGraph()$/;"	v
G	AttackMNIST/src/XAI/main.py	/^    G = reader.network_data_tf(model_path)$/;"	v
G	AttackMNIST/src/XAI/minExp.py	/^    G = nx.DiGraph()$/;"	v
G	AttackMNIST/src/XAI/reader.py	/^        G = network_data( $/;"	v
G1	AttackMNIST/src/XAI/verif_property.py	/^    G1 = nx.DiGraph()$/;"	v
G1_layer_sizes	AttackMNIST/src/XAI/verif_property.py	/^    G1_layer_sizes = [ 2, 8, 4 ]$/;"	v
G_copy	AttackMNIST/src/XAI/MinExp_bk.py	/^    G_copy = copy.deepcopy(G)$/;"	v
G_copy	AttackMNIST/src/XAI/minExp.py	/^    G_copy = copy.deepcopy(G)$/;"	v
GurobiAttack	AttackCIFAR/src/attackMethod.py	/^def GurobiAttack(inputs, model, outputs, k):$/;"	f
GurobiAttack	AttackImagenet/src/attackMethod.py	/^def GurobiAttack(inputs, model, outputs, k):$/;"	f
GurobiAttack	AttackMNIST/src/attackMethod.py	/^def GurobiAttack(inputs, model, outputs, k):$/;"	f
MODEL_PATH	AttackMNIST/src/attackMethod.py	/^MODEL_PATH = '..\/Models\/mnist.h5'$/;"	v
PielouMeaure	AttackCIFAR/src/PielouMesaure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	AttackImagenet/src/PielouMesaure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	AttackMNIST/src/PielouMesaure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/BlackBox_CIFAR/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/BlackBox_Imagenet/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/BlackBox_MNIST/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/FGSM_CIFAR/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/FGSM_Imagenet/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	BlackBox/FGSM_MNIST/src/pielouMeasure.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
PielouMeaure	autoattack/src/fid.py	/^def PielouMeaure(frequencies, num_classes):$/;"	f
SimpleCNN	BlackBox/BlackBox_CIFAR/src/trainModel.py	/^class SimpleCNN:$/;"	c
SimpleCNN	BlackBox/BlackBox_MNIST/src/trainModel.py	/^class SimpleCNN:$/;"	c
SimpleCNN	BlackBox/FGSM_CIFAR/src/trainModel.py	/^class SimpleCNN:$/;"	c
SimpleCNN	BlackBox/FGSM_MNIST/src/trainModel.py	/^class SimpleCNN:$/;"	c
XAI	AttackMNIST/src/XAI/MinExp_bk.py	/^class XAI:$/;"	c
XAI	AttackMNIST/src/XAI/minExp.py	/^class XAI:$/;"	c
X_test	AttackCIFAR/src/getCifarData.py	/^X_test = X_test \/ 255$/;"	v
X_test	AttackCIFAR/src/getCifarData.py	/^X_test = X_test.reshape((X_test.shape[0], 32*32*3)).astype('float32')$/;"	v
X_train	AttackCIFAR/src/getCifarData.py	/^X_train = X_train \/ 255$/;"	v
X_train	AttackCIFAR/src/getCifarData.py	/^X_train = X_train.reshape((X_train.shape[0], 32*32*3)).astype('float32')$/;"	v
__init__	AttackMNIST/src/XAI/MinExp_bk.py	/^    def __init__(self, LB=0, UB=784):$/;"	m	class:XAI
__init__	AttackMNIST/src/XAI/minExp.py	/^    def __init__(self, LB=0, UB=784):$/;"	m	class:XAI
__init__	AttackMNIST/src/XAI/slic.py	/^    def __init__(self):$/;"	m	class:Bundle
__init__	autoattack/src/cifar.py	/^    def __init__(self):$/;"	m	class:cifar_loader
__init__	autoattack/src/imagenet.py	/^    def __init__(self):$/;"	m	class:cifar_loader
__init__	autoattack/src/imagenet2.py	/^    def __init__(self):$/;"	m	class:cifar_loader
__init__	autoattack/src/mnist.py	/^    def __init__(self):$/;"	m	class:mnist_loader
add_property	AttackMNIST/src/XAI/verif_property.py	/^def add_property(G, flag_last_reLU, conj_lin_equations):$/;"	f
adv	autoattack/src/cifar.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv	autoattack/src/imagenet.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv	autoattack/src/imagenet2.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv	autoattack/src/mnist.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv_t	autoattack/src/cifar.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv_t	autoattack/src/imagenet.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv_t	autoattack/src/imagenet2.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adv_t	autoattack/src/mnist.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
adversarial_image	AttackMNIST/src/XAI/advImage.py	/^adversarial_image = np.expand_dims(mnist_image, axis=0)  # Add batch dimension$/;"	v
adversarial_image	AttackMNIST/src/XAI/advImage2.py	/^adversarial_image = mnist_image.copy()$/;"	v
attack	AttackCIFAR/src/attackMethod.py	/^def attack():$/;"	f
attack	AttackCIFAR/src/generateImages.py	/^def attack():$/;"	f
attack	AttackImagenet/src/attackMethod.py	/^def attack():$/;"	f
attack	AttackImagenet/src/generateImages.py	/^def attack():$/;"	f
ax	AttackMNIST/src/XAI/MinExp_bk.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
ax	AttackMNIST/src/XAI/draw.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
ax	AttackMNIST/src/XAI/verif_property.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
beforeChangingUpdateStatement	AttackImagenet/src/PielouMesaure.py	/^beforeChangingUpdateStatement = [0, 4, 35, 0, 0, 17, 181, 1, 59, 3]$/;"	v
bias	AttackMNIST/src/XAI/MinExp_bk.py	/^    bias = {$/;"	v
bias	AttackMNIST/src/XAI/draw.py	/^    bias = {$/;"	v
bias	AttackMNIST/src/XAI/minExp.py	/^    bias = {$/;"	v
build	BlackBox/BlackBox_CIFAR/src/trainModel.py	/^	def build(width, height, depth, classes):$/;"	m	class:SimpleCNN
build	BlackBox/BlackBox_MNIST/src/trainModel.py	/^	def build(width, height, depth, classes):$/;"	m	class:SimpleCNN
build	BlackBox/FGSM_CIFAR/src/trainModel.py	/^	def build(width, height, depth, classes):$/;"	m	class:SimpleCNN
build	BlackBox/FGSM_MNIST/src/trainModel.py	/^	def build(width, height, depth, classes):$/;"	m	class:SimpleCNN
bundle_imp	AttackMNIST/src/XAI/main.py	/^    bundle_imp = []$/;"	v
bundle_imp	AttackMNIST/src/XAI/main.py	/^    bundle_imp = enumerate(bundle_imp)$/;"	v
bundle_imp	AttackMNIST/src/XAI/main.py	/^    bundle_imp = sorted(bundle_imp, key = lambda x: x[1])$/;"	v
c_axis	AttackMNIST/src/XAI/main.py	/^    c_axis = None$/;"	v
calculateNorms	autoattack/src/cifar.py	/^def calculateNorms(orig_o, adv_o, orig, adv):$/;"	f
calculateNorms	autoattack/src/imagenet.py	/^def calculateNorms(orig_o, adv_o, orig, adv):$/;"	f
calculateNorms	autoattack/src/imagenet2.py	/^def calculateNorms(orig_o, adv_o, orig, adv):$/;"	f
calculateNorms	autoattack/src/mnist.py	/^def calculateNorms(orig_o, adv_o, orig, adv):$/;"	f
calculate_fid	AttackCIFAR/src/fid.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	AttackImagenet/src/fid.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	AttackMNIST/src/fid.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/BlackBox_CIFAR/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/BlackBox_Imagenet/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/BlackBox_MNIST/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/FGSM_CIFAR/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/FGSM_Imagenet/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	BlackBox/FGSM_MNIST/src/FID.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_fid	autoattack/src/fid.py	/^def calculate_fid(model, images1, images2):$/;"	f
calculate_ps	autoattack/src/fid.py	/^def calculate_ps(model, images1, images2):$/;"	f
calibrated_confidence_score	AttackMNIST/src/confidence_score.py	/^calibrated_confidence_score = calibrated_probabilities.max(axis=1)$/;"	v
calibrated_probabilities	AttackMNIST/src/confidence_score.py	/^calibrated_probabilities = np.interp(probabilities[:, 1], prob_pred, prob_true)$/;"	v
channel_axis	AttackMNIST/src/XAI/slic.py	/^    channel_axis = None$/;"	v
cifar_loader	autoattack/src/cifar.py	/^class cifar_loader:$/;"	c
cifar_loader	autoattack/src/imagenet.py	/^class cifar_loader:$/;"	c
cifar_loader	autoattack/src/imagenet2.py	/^class cifar_loader:$/;"	c
cifar_model	autoattack/src/cifar.py	/^def cifar_model():$/;"	f
cifar_model	autoattack/src/imagenet.py	/^def cifar_model():$/;"	f
cifar_model	autoattack/src/imagenet2.py	/^def cifar_model():$/;"	f
comp	AttackMNIST/src/XAI/main.py	/^    comp = 10$/;"	v
comp	AttackMNIST/src/XAI/slic.py	/^    comp = 0.1$/;"	v
computeValForNetwork	AttackMNIST/src/XAI/helper.py	/^def computeValForNetwork(G,val):$/;"	f
compute_gradient	AttackMNIST/src/XAI/main.py	/^def compute_gradient( G, inp , end_relu):$/;"	f
conj_lin_equations	AttackMNIST/src/XAI/MinExp_bk.py	/^    conj_lin_equations = [ [1,-1,0] ]$/;"	v
conj_lin_equations	AttackMNIST/src/XAI/minExp.py	/^    conj_lin_equations = [ [1,-1,0] ]$/;"	v
constructModel	AttackCIFAR/src/ConvertNNETtoTensor.py	/^    def constructModel(self, fileName):$/;"	m	class:ConvertNNETtoTensorFlow
constructModel	AttackImagenet/src/ConvertNNETtoTensor.py	/^    def constructModel(self, fileName):$/;"	m	class:ConvertNNETtoTensorFlow
constructModel	AttackMNIST/src/ConvertNNETtoTensor.py	/^    def constructModel(self, fileName):$/;"	m	class:ConvertNNETtoTensorFlow
contrastive_pairs	AttackMNIST/src/XAI/MinExp_bk.py	/^    def contrastive_pairs():$/;"	m	class:XAI
contrastive_pairs	AttackMNIST/src/XAI/minExp.py	/^    def contrastive_pairs(self):$/;"	m	class:XAI
contrastive_pairs_bundle	AttackMNIST/src/XAI/minExp.py	/^    def contrastive_pairs_bundle(self):$/;"	m	class:XAI
contrastive_singleton	AttackMNIST/src/XAI/MinExp_bk.py	/^    def contrastive_singleton():$/;"	m	class:XAI
contrastive_singleton	AttackMNIST/src/XAI/minExp.py	/^    def contrastive_singleton(self):$/;"	m	class:XAI
contrastive_singleton_bundle	AttackMNIST/src/XAI/minExp.py	/^    def contrastive_singleton_bundle(self):$/;"	m	class:XAI
convert	AttackImagenet/src/ConvertNNETtoTensor.py	/^    def convert(self, file):$/;"	m	class:ConvertNNETtoTensorFlow
convertChannel	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def convertChannel(path):$/;"	f
convertChannel	BlackBox/FGSM_CIFAR/src/prepareData.py	/^def convertChannel(path):$/;"	f
convertChannel	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def convertChannel(path):$/;"	f
convertImage	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def convertImage(image, w, h):$/;"	f
convertImage	BlackBox/FGSM_CIFAR/src/prepareData.py	/^def convertImage(image, w, h):$/;"	f
convertImage	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def convertImage(image, w, h):$/;"	f
convertToMtarix	AttackCIFAR/src/generateImages.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	AttackImagenet/src/generateImages.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	AttackMNIST/src/generateImages.py	/^def convertToMtarix(array, m, n):$/;"	f
convertToMtarix	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def convertToMtarix(array, m, n):$/;"	f
convertToMtarix	BlackBox/FGSM_CIFAR/src/generate2.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_CIFAR/src/prepareData.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_Imagenet/src/generate2.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
convertToMtarix	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def convertToMtarix(array, m, n):$/;"	f
convertToMtarix	autoattack/src/imagenet2.py	/^def convertToMtarix(array, m, n, channels):$/;"	f
count	AttackImagenet/src/launchAttack.py	/^count  = attack()$/;"	v
count	AttackMNIST/src/XAI/main.py	/^    count = 0$/;"	v
count	AttackMNIST/src/extractSubSetOfData.py	/^        count = count + 1$/;"	v
count	AttackMNIST/src/extractSubSetOfData.py	/^count = 0$/;"	v
count	AttackMNIST/src/launchAttack.py	/^count = generate()$/;"	v
counter	AttackCIFAR/src/attackMethod.py	/^counter=0$/;"	v
counter	AttackImagenet/src/attackMethod.py	/^counter=0$/;"	v
counter	AttackMNIST/src/attackMethod.py	/^counter=0$/;"	v
csvreader	AttackMNIST/src/extractSubSetOfData.py	/^    csvreader = csv.reader(csvfile)$/;"	v
csvwriter	AttackMNIST/src/extractSubSetOfData.py	/^        csvwriter = csv.writer(csvfile)$/;"	v
data	autoattack/src/cifar.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
data	autoattack/src/imagenet.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
data	autoattack/src/imagenet2.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
data	autoattack/src/mnist.py	/^import torch.utils.data as data$/;"	I	nameref:module:torch.utils.data
datasets	autoattack/src/cifar.py	/^import torchvision.datasets as datasets$/;"	I	nameref:module:torchvision.datasets
datasets	autoattack/src/imagenet.py	/^import torchvision.datasets as datasets$/;"	I	nameref:module:torchvision.datasets
datasets	autoattack/src/imagenet2.py	/^import torchvision.datasets as datasets$/;"	I	nameref:module:torchvision.datasets
datasets	autoattack/src/mnist.py	/^import torchvision.datasets as datasets$/;"	I	nameref:module:torchvision.datasets
displayResults	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def displayResults():$/;"	f
displayResults	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def displayResults():$/;"	f
displayResults	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def displayResults():$/;"	f
displayResults	BlackBox/FGSM_CIFAR/src/generate2.py	/^def displayResults():$/;"	f
displayResults	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def displayResults():$/;"	f
displayResults	BlackBox/FGSM_Imagenet/src/generate2.py	/^def displayResults():$/;"	f
displayResults	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def displayResults():$/;"	f
displayResults	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def displayResults():$/;"	f
download	autoattack/src/cifar.py	/^    def download(self):$/;"	m	class:cifar_loader
download	autoattack/src/imagenet.py	/^    def download(self):$/;"	m	class:cifar_loader
download	autoattack/src/imagenet2.py	/^    def download(self):$/;"	m	class:cifar_loader
download	autoattack/src/mnist.py	/^    def download(self):$/;"	m	class:mnist_loader
draw_neural_network	AttackMNIST/src/XAI/draw.py	/^def draw_neural_network(G, ax, layer_sizes, visualize=None):$/;"	f
draw_segments	AttackMNIST/src/XAI/slic.py	/^    def draw_segments(self):$/;"	m	class:Bundle
edges	AttackMNIST/src/XAI/MinExp_bk.py	/^    edges = [(i, j, {'weight' : weights[(i,j)]['weight']}) for (i,j), _ in weights.items()]$/;"	v
edges	AttackMNIST/src/XAI/draw.py	/^    edges = [(i, j, {'weight' : weights[(i,j)]['weight']}) for (i,j), _ in weights.items()]$/;"	v
edges	AttackMNIST/src/XAI/minExp.py	/^    edges = [(i, j, {'weight' : weights[(i,j)]['weight']}) for (i,j), _ in weights.items()]$/;"	v
epsilon	AttackMNIST/src/XAI/advImage.py	/^epsilon = 0.01$/;"	v
epsilon	AttackMNIST/src/XAI/advImage2.py	/^epsilon = 0.01$/;"	v
equations	AttackMNIST/src/XAI/verif_property.py	/^    equations = [$/;"	v
exp	AttackMNIST/src/XAI/MinExp_bk.py	/^    exp = E.explanation(G, inp_features, inp_lb, inp_ub)$/;"	v
exp_image	AttackMNIST/src/XAI/main.py	/^def exp_image(image_path, explanation, alpha=0.5):$/;"	f
explanation	AttackMNIST/src/XAI/MinExp_bk.py	/^    def explanation(self, G, input_features, input_lb, input_ub):$/;"	m	class:XAI
explanation	AttackMNIST/src/XAI/main.py	/^    explanation,lb_exp,pairs = E.explanation(G, important_neurons, inp_lb, inp_ub)$/;"	v
explanation	AttackMNIST/src/XAI/minExp.py	/^    def explanation(self, G, input_features, input_lb, input_ub, output_values=None):$/;"	m	class:XAI
extractModel	AttackCIFAR/src/extractNetwork.py	/^    def extractModel(self, model, layer_count):$/;"	m	class:extractNetwork
extractModel	AttackImagenet/src/extractNetwork.py	/^    def extractModel(self, model, layer_count):$/;"	m	class:extractNetwork
extractModel	AttackMNIST/src/extractNetwork.py	/^    def extractModel(self, model, layer_count):$/;"	m	class:extractNetwork
extractNetwork	AttackCIFAR/src/extractNetwork.py	/^class extractNetwork:$/;"	c
extractNetwork	AttackImagenet/src/extractNetwork.py	/^class extractNetwork:$/;"	c
extractNetwork	AttackMNIST/src/extractNetwork.py	/^class extractNetwork:$/;"	c
f	AttackCIFAR/src/getCifarData.py	/^f = open('inputs.csv', 'w')$/;"	v
f	AttackCIFAR/src/getCifarData.py	/^f = open('outputs.csv', 'w')$/;"	v
f	AttackMNIST/src/XAI/main.py	/^    f = open(".\/images\/2img6", "r")$/;"	v
fid	AttackCIFAR/src/fid.py	/^fid = calculate_fid(model, im1, im2)$/;"	v
fid	AttackImagenet/src/fid.py	/^fid = calculate_fid(model, im1, im2)$/;"	v
fid	AttackMNIST/src/fid.py	/^fid = calculate_fid(model, im1, im2)$/;"	v
fields	AttackMNIST/src/extractSubSetOfData.py	/^    fields = next(csvreader)$/;"	v
fields	AttackMNIST/src/extractSubSetOfData.py	/^fields = []$/;"	v
fig	AttackMNIST/src/XAI/MinExp_bk.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
fig	AttackMNIST/src/XAI/draw.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
fig	AttackMNIST/src/XAI/verif_property.py	/^    fig, ax = plt.subplots(figsize=(8, 6))$/;"	v
file	AttackMNIST/src/extractSubSetOfData.py	/^file = "inputs"$/;"	v
filename	AttackMNIST/src/extractSubSetOfData.py	/^filename = "..\/data\/"+file+"-1.csv"$/;"	v
find	AttackCIFAR/src/attackMethod.py	/^from findModificationsLayerK import find as find$/;"	Y	nameref:unknown:find
find	AttackCIFAR/src/findModificationsLayerK.py	/^def find(epsilon, model, inp, expected_label, num_inputs, num_outputs, mode, layer_to_change, la/;"	f
find	AttackCIFAR/src/generateImages.py	/^from findModificationsLayerK import find as find$/;"	Y	nameref:unknown:find
find	AttackCIFAR/src/modificationDivided.py	/^def find(epsilon, model, inp, expected_outputs, mode, layer_to_change, phaseGiven, phases, label/;"	f
find	AttackImagenet/src/attackMethod.py	/^from findModificationsLayerK import find as find$/;"	Y	nameref:unknown:find
find	AttackImagenet/src/findModificationsLayerK.py	/^def find(epsilon, model, inp, expected_label, num_inputs, num_outputs, mode, layer_to_change, la/;"	f
find	AttackImagenet/src/modificationDivided.py	/^def find(epsilon, model, inp, expected_outputs, mode, layer_to_change, phaseGiven, phases, label/;"	f
find	AttackMNIST/src/attackMethod.py	/^from findModificationsLayerK import find as find$/;"	Y	nameref:unknown:find
find	AttackMNIST/src/findModificationsLayerK.py	/^def find(epsilon, model, inp, expected_label, num_inputs, num_outputs, mode, layer_to_change, la/;"	f
find	AttackMNIST/src/generateImages.py	/^from findModificationsLayerK import find as find$/;"	Y	nameref:unknown:find
find	AttackMNIST/src/modificationDivided.py	/^def find(epsilon, model, inp, expected_outputs, mode, layer_to_change, phaseGiven, phases, label/;"	f
find2	AttackCIFAR/src/attackMethod.py	/^from modificationDivided import find as find2$/;"	Y	nameref:unknown:find
find2	AttackImagenet/src/attackMethod.py	/^from modificationDivided import find as find2$/;"	Y	nameref:unknown:find
find2	AttackMNIST/src/attackMethod.py	/^from modificationDivided import find as find2$/;"	Y	nameref:unknown:find
findClassForImage	AttackMNIST/src/XAI/helper.py	/^def findClassForImage(G, input_val):$/;"	f
generate	AttackMNIST/src/attackMethod.py	/^def generate():$/;"	f
generate	AttackMNIST/src/generateImages.py	/^def generate():$/;"	f
generateAdversarial	AttackCIFAR/src/attackMethod.py	/^def generateAdversarial(sat_in):$/;"	f
generateAdversarial	AttackImagenet/src/attackMethod.py	/^def generateAdversarial(sat_in, sat_out):$/;"	f
generateAdversarial	AttackMNIST/src/attackMethod.py	/^def generateAdversarial(sat_in):$/;"	f
generateAdversarial	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/FGSM_CIFAR/src/generate2.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/FGSM_Imagenet/src/generate2.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generateAdversarial	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def generateAdversarial(model, testX, testY, folderSuffix):$/;"	f
generate_image_adversary	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def generate_image_adversary(image):$/;"	f
generate_image_adversary	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def generate_image_adversary(image):$/;"	f
generate_image_adversary	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def generate_image_adversary(image):$/;"	f
generate_image_adversary	BlackBox/FGSM_CIFAR/src/generate2.py	/^def generate_image_adversary(model, image, label, eps=2 \/ 255.0):$/;"	f
generate_image_adversary	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def generate_image_adversary(model, image, label, eps=2 \/ 255.0):$/;"	f
generate_image_adversary	BlackBox/FGSM_Imagenet/src/generate2.py	/^def generate_image_adversary(model, image, label, eps=2 \/ 255.0):$/;"	f
generate_image_adversary	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def generate_image_adversary(model, image, label, eps=2 \/ 255.0):$/;"	f
generate_image_adversary	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def generate_image_adversary(model, image, label, eps=2 \/ 255.0):$/;"	f
generate_segments	AttackMNIST/src/XAI/slic.py	/^    def generate_segments(self, image_file, num_segs, comp, channel_axis=None):$/;"	m	class:Bundle
getAdversarial	autoattack/src/cifar.py	/^def getAdversarial(threshold):$/;"	f
getAdversarial	autoattack/src/imagenet.py	/^def getAdversarial(threshold):$/;"	f
getAdversarial	autoattack/src/imagenet2.py	/^def getAdversarial(threshold):$/;"	f
getAdversarial	autoattack/src/mnist.py	/^def getAdversarial(threshold):$/;"	f
getData	AttackCIFAR/src/attackMethod.py	/^def getData():$/;"	f
getData	AttackCIFAR/src/trainCifar.py	/^def getData():$/;"	f
getData	AttackImagenet/src/attackMethod.py	/^def getData():$/;"	f
getData	AttackMNIST/src/attackMethod.py	/^def getData():$/;"	f
getData	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def getData(w, h):$/;"	f
getData	BlackBox/FGSM_CIFAR/src/generate2.py	/^def getData(imageName, label, w, h):$/;"	f
getData	BlackBox/FGSM_Imagenet/src/generate2.py	/^def getData(imageName, label, w, h):$/;"	f
getData	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def getData(w, h):$/;"	f
getEpsilons	AttackCIFAR/src/attackMethod.py	/^def getEpsilons(layer_to_change, inp,labels):$/;"	f
getEpsilons	AttackImagenet/src/attackMethod.py	/^def getEpsilons(layer_to_change, inp, labels):$/;"	f
getEpsilons	AttackMNIST/src/attackMethod.py	/^def getEpsilons(layer_to_change, inp, labels):$/;"	f
getImages	AttackCIFAR/src/calculateNorms.py	/^def getImages():$/;"	f
getImages	AttackCIFAR/src/fid.py	/^def getImages(folderSuffix):$/;"	f
getImages	AttackImagenet/src/calculateNorms.py	/^def getImages():$/;"	f
getImages	AttackImagenet/src/fid.py	/^def getImages():$/;"	f
getImages	AttackMNIST/src/calculateNorms.py	/^def getImages():$/;"	f
getImages	AttackMNIST/src/fid.py	/^def getImages():$/;"	f
getImages	BlackBox/BlackBox_CIFAR/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	BlackBox/BlackBox_Imagenet/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	BlackBox/BlackBox_MNIST/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	BlackBox/FGSM_CIFAR/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	BlackBox/FGSM_Imagenet/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	BlackBox/FGSM_MNIST/src/FID.py	/^def getImages(folderSuffix):$/;"	f
getImages	autoattack/src/imagenet.py	/^    def getImages(self):$/;"	m	class:cifar_loader
getImages	autoattack/src/imagenet2.py	/^    def getImages(self):$/;"	m	class:cifar_loader
getLayerSize	AttackMNIST/src/XAI/helper.py	/^def getLayerSize(layers):$/;"	f
getLayers	AttackMNIST/src/XAI/helper.py	/^def getLayers(G):$/;"	f
getModel	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/BlackBox_CIFAR/src/trainModel.py	/^def getModel():$/;"	f
getModel	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/BlackBox_MNIST/src/trainModel.py	/^def getModel():$/;"	f
getModel	BlackBox/FGSM_CIFAR/src/generate2.py	/^def getModel(imageName, label):$/;"	f
getModel	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/FGSM_CIFAR/src/trainModel.py	/^def getModel():$/;"	f
getModel	BlackBox/FGSM_Imagenet/src/generate2.py	/^def getModel(imageName, label):$/;"	f
getModel	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def getModel():$/;"	f
getModel	BlackBox/FGSM_MNIST/src/trainModel.py	/^def getModel():$/;"	f
getOutputs	autoattack/src/imagenet.py	/^    def getOutputs(self, x):$/;"	m	class:cifar_loader
getOutputs	autoattack/src/imagenet2.py	/^    def getOutputs(self, x):$/;"	m	class:cifar_loader
getSingleImage	BlackBox/FGSM_CIFAR/src/prepareData.py	/^def getSingleImage(imageName, label, w, h):$/;"	f
getSingleImage	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def getSingleImage(imageName, label, w, h):$/;"	f
getTrainData	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def getTrainData(w, h):$/;"	f
getTrainData	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def getTrainData(w, h):$/;"	f
getValData	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def getValData(w, h):$/;"	f
getValData	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def getValData(w, h):$/;"	f
get_neuron_values	AttackCIFAR/src/findModificationsLayerK.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values	AttackCIFAR/src/modificationDivided.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values	AttackImagenet/src/findModificationsLayerK.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values	AttackImagenet/src/modificationDivided.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values	AttackMNIST/src/findModificationsLayerK.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values	AttackMNIST/src/modificationDivided.py	/^def get_neuron_values(loaded_model, input, num_layers, values, gurobi_model, epsilon_max, mode, /;"	f
get_neuron_values_actual	AttackCIFAR/src/attackMethod.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackCIFAR/src/findModificationsLayerK.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackCIFAR/src/modificationDivided.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackImagenet/src/attackMethod.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackImagenet/src/findModificationsLayerK.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackImagenet/src/modificationDivided.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackMNIST/src/attackMethod.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackMNIST/src/findModificationsLayerK.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_neuron_values_actual	AttackMNIST/src/modificationDivided.py	/^def get_neuron_values_actual(loaded_model, input, num_layers):$/;"	f
get_normalized_data	autoattack/src/cifar.py	/^    def get_normalized_data(self):$/;"	m	class:cifar_loader
get_normalized_data	autoattack/src/imagenet.py	/^    def get_normalized_data(self):$/;"	m	class:cifar_loader
get_normalized_data	autoattack/src/imagenet2.py	/^    def get_normalized_data(self):$/;"	m	class:cifar_loader
get_normalized_data	autoattack/src/mnist.py	/^    def get_normalized_data(self):$/;"	m	class:mnist_loader
get_raw_data	autoattack/src/cifar.py	/^    def get_raw_data(self):$/;"	m	class:cifar_loader
get_raw_data	autoattack/src/imagenet.py	/^    def get_raw_data(self):$/;"	m	class:cifar_loader
get_raw_data	autoattack/src/imagenet2.py	/^    def get_raw_data(self):$/;"	m	class:cifar_loader
get_raw_data	autoattack/src/mnist.py	/^    def get_raw_data(self):$/;"	m	class:mnist_loader
gp	AttackCIFAR/src/attackMethod.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
gp	AttackCIFAR/src/findModificationsLayerK.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
gp	AttackImagenet/src/attackMethod.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
gp	AttackImagenet/src/findModificationsLayerK.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
gp	AttackMNIST/src/attackMethod.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
gp	AttackMNIST/src/findModificationsLayerK.py	/^import gurobipy as gp$/;"	I	nameref:module:gurobipy
grb	AttackCIFAR/src/findModificationsLayerK.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
grb	AttackCIFAR/src/modificationDivided.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
grb	AttackImagenet/src/findModificationsLayerK.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
grb	AttackImagenet/src/modificationDivided.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
grb	AttackMNIST/src/findModificationsLayerK.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
grb	AttackMNIST/src/modificationDivided.py	/^import gurobipy as grb$/;"	I	nameref:module:gurobipy
im1	AttackCIFAR/src/fid.py	/^im1, im2 = getImages()$/;"	v
im1	AttackImagenet/src/fid.py	/^im1, im2 = getImages()$/;"	v
im1	AttackMNIST/src/fid.py	/^im1, im2 = getImages()$/;"	v
im2	AttackCIFAR/src/fid.py	/^im1, im2 = getImages()$/;"	v
im2	AttackImagenet/src/fid.py	/^im1, im2 = getImages()$/;"	v
im2	AttackMNIST/src/fid.py	/^im1, im2 = getImages()$/;"	v
image	AttackMNIST/src/XAI/main.py	/^    image = ast.literal_eval(f.read())$/;"	v
image	AttackMNIST/src/XAI/main.py	/^    image = exp_image(image_path, explanation)$/;"	v
image	AttackMNIST/src/XAI/main.py	/^    image = exp_image(image_path, lb_exp)$/;"	v
image	AttackMNIST/src/XAI/main.py	/^    image = exp_image(image_path, pairs_exp)$/;"	v
image_path	AttackMNIST/src/XAI/advImage.py	/^image_path = '..\/Images\/digits\/0_Digits_1001.png'$/;"	v
image_path	AttackMNIST/src/XAI/advImage2.py	/^image_path = '..\/Images\/digits\/4_Digits_10.png'$/;"	v
image_path	AttackMNIST/src/XAI/main.py	/^    image_path = "..\/Images\/digits\/2_Digits_6.png"$/;"	v
img_dict	AttackMNIST/src/XAI/main.py	/^    img_dict = {}$/;"	v
imp_neu_dict	AttackMNIST/src/XAI/main.py	/^    imp_neu_dict = {}$/;"	v
imp_neus	AttackMNIST/src/XAI/main.py	/^    imp_neus = compute_gradient(G,image,False)$/;"	v
important_neurons	AttackMNIST/src/XAI/main.py	/^    important_neurons = []$/;"	v
important_neurons	AttackMNIST/src/XAI/main.py	/^    important_neurons = inp_f_bundle$/;"	v
inp_f_bundle	AttackMNIST/src/XAI/main.py	/^    inp_f_bundle = []$/;"	v
inp_features	AttackMNIST/src/XAI/MinExp_bk.py	/^    inp_features = [ ((0,0),0),((0,1),1),((0,2),1) ]$/;"	v
inp_lb	AttackMNIST/src/XAI/MinExp_bk.py	/^    inp_lb = [0,0,0]$/;"	v
inp_lb	AttackMNIST/src/XAI/main.py	/^    inp_lb = [0]*784$/;"	v
inp_ub	AttackMNIST/src/XAI/MinExp_bk.py	/^    inp_ub = [1,1,1]$/;"	v
inp_ub	AttackMNIST/src/XAI/main.py	/^    inp_ub = [1]*784$/;"	v
input_features_bundle	AttackMNIST/src/XAI/main.py	/^    input_features_bundle = B.generate_segments(image_path, seg, comp, c_axis)$/;"	v
input_name	AttackMNIST/src/XAI/advImage.py	/^input_name = minimal_explanation[0][0][0]$/;"	v
input_name	AttackMNIST/src/XAI/advImage2.py	/^input_name = ort_session.get_inputs()[0].name$/;"	v
input_shape	AttackMNIST/src/XAI/advImage.py	/^input_shape = ort_session.get_inputs()[0].shape$/;"	v
l	AttackMNIST/src/XAI/main.py	/^    l = [0] * 11$/;"	v
l2	autoattack/src/cifar.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
l2	autoattack/src/mnist.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
labelling	AttackCIFAR/src/label.py	/^def labelling(model,true_output, threshold):$/;"	f
labelling	AttackImagenet/src/label.py	/^def labelling(model,true_output, threshold):$/;"	f
labelling	AttackMNIST/src/label.py	/^def labelling(model,true_output, threshold):$/;"	f
layer_sizes	AttackMNIST/src/XAI/MinExp_bk.py	/^    layer_sizes = [3, 3, 2]  # Number of nodes in each layer$/;"	v
layer_sizes	AttackMNIST/src/XAI/draw.py	/^    layer_sizes = [3, 3, 2]  # Number of nodes in each layer$/;"	v
layer_sizes	AttackMNIST/src/XAI/minExp.py	/^    layer_sizes = [3, 3, 2]  # Number of nodes in each layer$/;"	v
lb_exp	AttackMNIST/src/XAI/main.py	/^    explanation,lb_exp,pairs = E.explanation(G, important_neurons, inp_lb, inp_ub)$/;"	v
lb_exp	AttackMNIST/src/XAI/main.py	/^    lb_exp = chain.from_iterable(lb_exp)$/;"	v
lb_thread	AttackMNIST/src/XAI/MinExp_bk.py	/^    def lb_thread(self):$/;"	m	class:XAI
lb_thread	AttackMNIST/src/XAI/minExp.py	/^    def lb_thread(self, q):$/;"	m	class:XAI
lb_thread_bundle	AttackMNIST/src/XAI/minExp.py	/^    def lb_thread_bundle(self, q):$/;"	m	class:XAI
length	AttackMNIST/src/XAI/verif_property.py	/^    length  = len(G1_layer_sizes)$/;"	v
lin_eqn	AttackMNIST/src/XAI/main.py	/^    lin_eqn = [[i for i in l] for _ in range(9)]$/;"	v
linf	AttackCIFAR/src/calculateNorms.py	/^def linf(orig, adv):$/;"	f
linf	AttackImagenet/src/calculateNorms.py	/^def linf(orig, adv):$/;"	f
linf	AttackMNIST/src/calculateNorms.py	/^def linf(orig, adv):$/;"	f
linf	autoattack/src/cifar.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
linf	autoattack/src/cifar.py	/^def linf(orig, adv):$/;"	f
linf	autoattack/src/imagenet.py	/^def linf(orig, adv):$/;"	f
linf	autoattack/src/imagenet2.py	/^def linf(orig, adv):$/;"	f
linf	autoattack/src/mnist.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
linf	autoattack/src/mnist.py	/^def linf(orig, adv):$/;"	f
loadModel	AttackCIFAR/src/attackMethod.py	/^def loadModel():$/;"	f
loadModel	AttackCIFAR/src/fid.py	/^def loadModel():$/;"	f
loadModel	AttackImagenet/src/attackMethod.py	/^def loadModel():$/;"	f
loadModel	AttackImagenet/src/fid.py	/^def loadModel():$/;"	f
loadModel	AttackMNIST/src/attackMethod.py	/^def loadModel():$/;"	f
loadModel	AttackMNIST/src/fid.py	/^def loadModel():$/;"	f
minimal_explanation	AttackMNIST/src/XAI/advImage.py	/^minimal_explanation = [((0, 10), 0.5), ((0, 20), 0.8)]$/;"	v
minimal_explanation	AttackMNIST/src/XAI/advImage2.py	/^minimal_explanation = [((0, 10), 0.1), ((0, 20), 0.4)]$/;"	v
mnist_image	AttackMNIST/src/XAI/advImage.py	/^mnist_image = mnist_image \/ 255.0$/;"	v
mnist_image	AttackMNIST/src/XAI/advImage.py	/^mnist_image = np.array(Image.open(image_path).convert('L'))  # Convert to grayscale$/;"	v
mnist_image	AttackMNIST/src/XAI/advImage2.py	/^mnist_image = mnist_image \/ 255.0$/;"	v
mnist_image	AttackMNIST/src/XAI/advImage2.py	/^mnist_image = np.array(Image.open(image_path).convert('L')).reshape(784,)  # Flatten to shape [7/;"	v
mnist_loader	autoattack/src/mnist.py	/^class mnist_loader:$/;"	c
mnist_model	autoattack/src/mnist.py	/^def mnist_model():$/;"	f
model	AttackCIFAR/src/fid.py	/^model = loadModel()$/;"	v
model	AttackImagenet/src/fid.py	/^model = loadModel()$/;"	v
model	AttackMNIST/src/XAI/main.py	/^    model = tf.keras.models.load_model(model_path)$/;"	v
model	AttackMNIST/src/fid.py	/^model = loadModel()$/;"	v
model	BlackBox/BlackBox_CIFAR/src/trainModel.py	/^model = getModel()$/;"	v
model	BlackBox/BlackBox_MNIST/src/trainModel.py	/^model = getModel()$/;"	v
model	BlackBox/FGSM_CIFAR/src/trainModel.py	/^model = getModel()$/;"	v
model	BlackBox/FGSM_MNIST/src/trainModel.py	/^model = getModel()$/;"	v
model_path	AttackMNIST/src/XAI/main.py	/^    model_path = "..\/AIGENT\/AttackMNIST\/Models\/mnist.h5"$/;"	v
model_to_graph	AttackMNIST/src/attackMethod.py	/^def model_to_graph(model_filename):$/;"	f
network_data_onnx	AttackMNIST/src/XAI/reader.py	/^def network_data_onnx(onnx_filename):$/;"	f
network_data_tf	AttackMNIST/src/XAI/reader.py	/^def network_data_tf(model_filename):$/;"	f
nn	autoattack/src/cifar.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	autoattack/src/imagenet.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	autoattack/src/imagenet2.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
nn	autoattack/src/mnist.py	/^import torch.nn as nn$/;"	I	nameref:module:torch.nn
no_exp	AttackMNIST/src/attackMethod.py	/^no_exp = 0$/;"	v
no_pair	AttackMNIST/src/attackMethod.py	/^no_pair=0$/;"	v
no_sig	AttackMNIST/src/attackMethod.py	/^no_sig=0$/;"	v
no_ub	AttackMNIST/src/attackMethod.py	/^no_ub=0$/;"	v
nodes	AttackMNIST/src/XAI/MinExp_bk.py	/^    nodes = [ ((i, j), {'bias': bias[(i,j)]}) for i,_ in enumerate(layer_sizes) for j in range(l/;"	v
nodes	AttackMNIST/src/XAI/draw.py	/^    nodes = [ ((i, j), {'bias': bias[(i,j)]}) for i,_ in enumerate(layer_sizes) for j in range(l/;"	v
nodes	AttackMNIST/src/XAI/minExp.py	/^    nodes = [ ((i, j), {'bias': bias[(i,j)]}) for i,_ in enumerate(layer_sizes) for j in range(l/;"	v
np	AttackCIFAR/src/ConvertNNETtoTensor.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/attackMethod.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/calculateNorms.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/extractNetwork.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/fid.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/findModificationsLayerK.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/generateImages.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackCIFAR/src/modificationDivided.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/ConvertNNETtoTensor.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/attackMethod.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/calculateNorms.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/extractNetwork.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/fid.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/findModificationsLayerK.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/generateImages.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackImagenet/src/modificationDivided.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/ConvertNNETtoTensor.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/advImage.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/advImage2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/main.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/reader.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/slic.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/XAI/verif_property.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/attackMethod.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/calculateNorms.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/confidence_score.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/extractNetwork.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/extractSubSetOfData.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/fid.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/findModificationsLayerK.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/generateImages.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	AttackMNIST/src/modificationDivided.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_CIFAR/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_CIFAR/src/trainModel.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_Imagenet/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_MNIST/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/BlackBox_MNIST/src/trainModel.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_CIFAR/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_CIFAR/src/generate2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_CIFAR/src/prepareData.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_CIFAR/src/trainModel.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_Imagenet/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_Imagenet/src/generate2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_Imagenet/src/prepareData.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_MNIST/src/FID.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	BlackBox/FGSM_MNIST/src/trainModel.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autoattack/src/cifar.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autoattack/src/fid.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autoattack/src/imagenet.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autoattack/src/imagenet2.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	autoattack/src/mnist.py	/^import numpy as np$/;"	I	nameref:module:numpy
nx	AttackMNIST/src/XAI/MinExp_bk.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/XAI/draw.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/XAI/helper.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/XAI/minExp.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/XAI/reader.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/XAI/verif_property.py	/^import networkx as nx$/;"	I	nameref:module:networkx
nx	AttackMNIST/src/attackMethod.py	/^import networkx as nx$/;"	I	nameref:module:networkx
onnx_model	AttackMNIST/src/XAI/advImage.py	/^onnx_model = onnx.load(onnx_model_path)$/;"	v
onnx_model	AttackMNIST/src/XAI/advImage2.py	/^onnx_model = onnx.load(onnx_model_path)$/;"	v
onnx_model_path	AttackMNIST/src/XAI/advImage.py	/^onnx_model_path = '.\/networks\/path_to_save_model.onnx'$/;"	v
onnx_model_path	AttackMNIST/src/XAI/advImage2.py	/^onnx_model_path = '.\/networks\/path_to_save_model.onnx'$/;"	v
orig	autoattack/src/cifar.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig	autoattack/src/imagenet.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig	autoattack/src/imagenet2.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig	autoattack/src/mnist.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig_t	autoattack/src/cifar.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig_t	autoattack/src/imagenet.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig_t	autoattack/src/imagenet2.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
orig_t	autoattack/src/mnist.py	/^    orig, adv, orig_t, adv_t = getAdversarial(threshold)$/;"	v
ort_session	AttackMNIST/src/XAI/advImage.py	/^ort_session = onnxruntime.InferenceSession(onnx_model_path)$/;"	v
ort_session	AttackMNIST/src/XAI/advImage2.py	/^ort_session = onnxruntime.InferenceSession(onnx_model_path)$/;"	v
pairs	AttackMNIST/src/XAI/main.py	/^    explanation,lb_exp,pairs = E.explanation(G, important_neurons, inp_lb, inp_ub)$/;"	v
pairs_exp	AttackMNIST/src/XAI/main.py	/^            pairs_exp = pairs_exp.union(item)$/;"	v
pairs_exp	AttackMNIST/src/XAI/main.py	/^    pairs_exp = set()$/;"	v
perturbed_image	AttackMNIST/src/XAI/advImage.py	/^perturbed_image = mnist_image + epsilon * adversarial_image[0, 0]$/;"	v
perturbed_image	AttackMNIST/src/XAI/advImage.py	/^perturbed_image = np.clip(perturbed_image, 0, 1)$/;"	v
perturbed_image	AttackMNIST/src/XAI/advImage2.py	/^perturbed_image = mnist_image + epsilon * adversarial_image$/;"	v
perturbed_image	AttackMNIST/src/XAI/advImage2.py	/^perturbed_image = np.clip(perturbed_image, 0, 1)$/;"	v
perturbed_image	AttackMNIST/src/XAI/advImage2.py	/^perturbed_image = perturbed_image.astype(np.float32)$/;"	v
perturbed_predictions	AttackMNIST/src/XAI/advImage.py	/^perturbed_predictions = ort_session.run(None, {input_name: np.expand_dims(perturbed_image, axis=/;"	v
perturbed_predictions	AttackMNIST/src/XAI/advImage2.py	/^perturbed_predictions = ort_session.run(None, {input_name: perturbed_image.reshape(1, 784)})$/;"	v
pixel_index	AttackMNIST/src/XAI/advImage.py	/^    pixel_index = int(pixel_index)$/;"	v
pixel_index	AttackMNIST/src/XAI/advImage2.py	/^    pixel_index = pixel_pos[1]$/;"	v
pixels	autoattack/src/cifar.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
pixels	autoattack/src/mnist.py	/^    l2, linf, pixels = calculateNorms(orig, adv, orig_t, adv_t)$/;"	v
plot_from_lists	AttackMNIST/src/XAI/slic.py	/^    def plot_from_lists(pixel_lists):$/;"	m	class:Bundle
plt	AttackMNIST/src/XAI/advImage.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	AttackMNIST/src/XAI/advImage2.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	AttackMNIST/src/XAI/draw.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	AttackMNIST/src/XAI/main.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	AttackMNIST/src/XAI/slic.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	AttackMNIST/src/XAI/verif_property.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
pred_class	AttackMNIST/src/XAI/main.py	/^    pred_class = np.argmax(pred_output)$/;"	v
pred_output	AttackMNIST/src/XAI/main.py	/^    pred_output = model.predict(np.array([image]))[0]$/;"	v
predict	AttackCIFAR/src/ConvertNNETtoTensor.py	/^    def predict(self, model, inputToModel, actual_output):$/;"	m	class:ConvertNNETtoTensorFlow
predict	AttackCIFAR/src/attackMethod.py	/^def predict(epsilon, layer_to_change, sat_in):$/;"	f
predict	AttackImagenet/src/ConvertNNETtoTensor.py	/^    def predict(self, model, inputToModel, actual_output):$/;"	m	class:ConvertNNETtoTensorFlow
predict	AttackImagenet/src/attackMethod.py	/^def predict(epsilon, layer_to_change, sat_in):$/;"	f
predict	AttackMNIST/src/ConvertNNETtoTensor.py	/^    def predict(self, model, inputToModel, actual_output):$/;"	m	class:ConvertNNETtoTensorFlow
predict	AttackMNIST/src/attackMethod.py	/^def predict(epsilon, layer_to_change, sat_in):$/;"	f
predicted_class	AttackMNIST/src/XAI/advImage2.py	/^predicted_class = np.argmax(perturbed_predictions)$/;"	v
printActivations	AttackCIFAR/src/extractNetwork.py	/^    def printActivations(self, model):$/;"	m	class:extractNetwork
printActivations	AttackImagenet/src/extractNetwork.py	/^    def printActivations(self, model):$/;"	m	class:extractNetwork
printActivations	AttackMNIST/src/extractNetwork.py	/^    def printActivations(self, model):$/;"	m	class:extractNetwork
prob_pred	AttackMNIST/src/confidence_score.py	/^prob_true, prob_pred = calibration_curve(true_labels, probabilities[:, 1], n_bins=10)$/;"	v
prob_true	AttackMNIST/src/confidence_score.py	/^prob_true, prob_pred = calibration_curve(true_labels, probabilities[:, 1], n_bins=10)$/;"	v
probabilities	AttackMNIST/src/confidence_score.py	/^probabilities = model.predict_proba(X_test)$/;"	v
read_nnet	AttackCIFAR/src/ConvertNNETtoTensor.py	/^    def read_nnet(self, file_name):$/;"	m	class:ConvertNNETtoTensorFlow
read_nnet	AttackImagenet/src/ConvertNNETtoTensor.py	/^    def read_nnet(self, file_name):$/;"	m	class:ConvertNNETtoTensorFlow
read_nnet	AttackMNIST/src/ConvertNNETtoTensor.py	/^    def read_nnet(self, file_name):$/;"	m	class:ConvertNNETtoTensorFlow
remove_after_layer	AttackMNIST/src/attackMethod.py	/^def remove_after_layer(G, layer_num):$/;"	f
remove_till_layer	AttackMNIST/src/XAI/minExp.py	/^def remove_till_layer(G, layer_num):$/;"	f
remove_till_layer	AttackMNIST/src/attackMethod.py	/^def remove_till_layer(G, layer_num):$/;"	f
rows	AttackMNIST/src/extractSubSetOfData.py	/^rows = []$/;"	v
saveImages	autoattack/src/imagenet2.py	/^def saveImages(orig_o, adv_o, orig, adv):$/;"	f
seg	AttackMNIST/src/XAI/main.py	/^    seg = 50$/;"	v
segs	AttackMNIST/src/XAI/slic.py	/^    segs = 50$/;"	v
show	AttackCIFAR/src/generateImages.py	/^def show(pixelMatrix, m, n, channels):$/;"	f
show	AttackMNIST/src/generateImages.py	/^def show(pixelMatrix, w, h):$/;"	f
show	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^def show(pixelMatrix, w, h):$/;"	f
show	BlackBox/FGSM_CIFAR/src/generate2.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/FGSM_Imagenet/src/generate2.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
show	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^def show(pixelMatrix, w, h):$/;"	f
show	autoattack/src/imagenet2.py	/^def show(pixelMatrix, w, h, channels):$/;"	f
showing	AttackImagenet/src/generateImages.py	/^def showing(pixelMatrix, m, n, channels):$/;"	f
showing	BlackBox/BlackBox_Imagenet/src/prepareData.py	/^def showing(pixelMatrix, m, n, channels):$/;"	f
showing	BlackBox/FGSM_CIFAR/src/prepareData.py	/^def showing(pixelMatrix, m, n, channels):$/;"	f
showing	BlackBox/FGSM_Imagenet/src/prepareData.py	/^def showing(pixelMatrix, m, n, channels):$/;"	f
sum	AttackMNIST/src/XAI/main.py	/^        sum = 0$/;"	v
t1	AttackCIFAR/src/launchAttack.py	/^t1 = time()$/;"	v
t1	AttackImagenet/src/launchAttack.py	/^t1 = time()$/;"	v
t1	AttackMNIST/src/launchAttack.py	/^t1 = time()$/;"	v
t1	autoattack/src/cifar.py	/^    t1 = time()$/;"	v
t1	autoattack/src/imagenet.py	/^    t1 = time()$/;"	v
t1	autoattack/src/imagenet2.py	/^    t1 = time()$/;"	v
t1	autoattack/src/mnist.py	/^    t1 = time()$/;"	v
t2	AttackCIFAR/src/launchAttack.py	/^t2 = time()$/;"	v
t2	AttackImagenet/src/launchAttack.py	/^t2 = time()$/;"	v
t2	AttackMNIST/src/launchAttack.py	/^t2 = time()$/;"	v
t2	autoattack/src/cifar.py	/^    t2 = time()$/;"	v
t2	autoattack/src/imagenet.py	/^    t2 = time()$/;"	v
t2	autoattack/src/imagenet2.py	/^    t2 = time()$/;"	v
t2	autoattack/src/mnist.py	/^    t2 = time()$/;"	v
test_no	AttackMNIST/src/XAI/reader.py	/^    test_no = int(sys.argv[1])$/;"	v
tf	AttackCIFAR/src/ConvertNNETtoTensor.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/attackMethod.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/calculateNorms.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/extractNetwork.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/fid.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/generateImages.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackCIFAR/src/label.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/ConvertNNETtoTensor.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/attackMethod.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/calculateNorms.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/extractNetwork.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/fid.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/generateImages.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackImagenet/src/label.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/ConvertNNETtoTensor.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/XAI/main.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/XAI/reader.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/attackMethod.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/calculateNorms.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/extractNetwork.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/fid.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/generateImages.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	AttackMNIST/src/label.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_CIFAR/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_CIFAR/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_Imagenet/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_Imagenet/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_MNIST/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/BlackBox_MNIST/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_CIFAR/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_CIFAR/src/generate2.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_CIFAR/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_Imagenet/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_Imagenet/src/generate2.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_Imagenet/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_MNIST/src/FID.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	BlackBox/FGSM_MNIST/src/generateAdversary.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	autoattack/src/cifar.py	/^import tensorflow.compat.v1 as tf$/;"	I	nameref:module:tensorflow.compat.v1
tf	autoattack/src/fid.py	/^import tensorflow as tf$/;"	I	nameref:module:tensorflow
tf	autoattack/src/imagenet.py	/^import tensorflow.compat.v1 as tf$/;"	I	nameref:module:tensorflow.compat.v1
tf	autoattack/src/imagenet2.py	/^import tensorflow.compat.v1 as tf$/;"	I	nameref:module:tensorflow.compat.v1
tf	autoattack/src/mnist.py	/^import tensorflow.compat.v1 as tf$/;"	I	nameref:module:tensorflow.compat.v1
threshold	autoattack/src/cifar.py	/^    threshold = 1000$/;"	v
threshold	autoattack/src/imagenet.py	/^    threshold = 1000$/;"	v
threshold	autoattack/src/imagenet2.py	/^    threshold = 1000$/;"	v
threshold	autoattack/src/mnist.py	/^    threshold = 1000$/;"	v
train	AttackCIFAR/src/trainCifar.py	/^def train():$/;"	f
transforms	autoattack/src/cifar.py	/^import torchvision.transforms as transforms$/;"	I	nameref:module:torchvision.transforms
transforms	autoattack/src/imagenet.py	/^import torchvision.transforms as transforms$/;"	I	nameref:module:torchvision.transforms
transforms	autoattack/src/imagenet2.py	/^import torchvision.transforms as transforms$/;"	I	nameref:module:torchvision.transforms
transforms	autoattack/src/mnist.py	/^import torchvision.transforms as transforms$/;"	I	nameref:module:torchvision.transforms
true_labels	AttackMNIST/src/confidence_score.py	/^true_labels = y_test$/;"	v
ub_thread	AttackMNIST/src/XAI/MinExp_bk.py	/^    def ub_thread(self):$/;"	m	class:XAI
ub_thread	AttackMNIST/src/XAI/minExp.py	/^    def ub_thread(self, q):$/;"	m	class:XAI
ub_thread_bundle	AttackMNIST/src/XAI/minExp.py	/^    def ub_thread_bundle(self, q):$/;"	m	class:XAI
updateModel	AttackCIFAR/src/attackMethod.py	/^def updateModel(sat_in):$/;"	f
updateModel	AttackImagenet/src/attackMethod.py	/^def updateModel(sat_in):$/;"	f
updateModel	AttackMNIST/src/attackMethod.py	/^def updateModel(sat_in):$/;"	f
verif_query	AttackMNIST/src/XAI/minExp.py	/^    def verif_query(self, G, orig_features, free_list):$/;"	m	class:XAI
verify	AttackMNIST/src/XAI/MinExp_bk.py	/^    def verify(self, G, fixed_features, free_list):$/;"	m	class:XAI
visualize	AttackMNIST/src/XAI/MinExp_bk.py	/^    visualize = []$/;"	v
weights	AttackMNIST/src/XAI/MinExp_bk.py	/^    weights = {$/;"	v
weights	AttackMNIST/src/XAI/draw.py	/^    weights = {$/;"	v
weights	AttackMNIST/src/XAI/minExp.py	/^    weights = {$/;"	v
writer	AttackCIFAR/src/getCifarData.py	/^writer = csv.writer(f)$/;"	v
